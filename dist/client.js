import l from"amqplib";import{v4 as i}from"uuid";class a{connection=null;channel=null;url;queues;callbacks=new Map;constructor(e,t){this.url=e,this.queues=t}async connect(){try{this.connection=await l.connect(this.url),this.channel=await this.connection.createChannel(),await this.channel.assertQueue(this.queues.response),this.channel.consume(this.queues.response,(e)=>{if(e){const t=JSON.parse(e.content.toString()),n=this.callbacks.get(t.correlationId);if(n)n(null,t.result);this.callbacks.delete(t.correlationId),this.channel?.ack(e)}})}catch(e){throw console.error("Error connecting to RabbitMQ:",e),e}}async addSMTPConfig(e,t){if(!this.channel)throw new Error("Not connected to RabbitMQ");const s={correlationId:i(),smtp:{[e]:t}};await this.channel.assertQueue(this.queues.request),this.channel.sendToQueue(this.queues.request,Buffer.from(JSON.stringify(s)))}async addTemplate(e,t){if(!this.channel)throw new Error("Not connected to RabbitMQ");const s={correlationId:i(),template:{[e]:t}};await this.channel.assertQueue(this.queues.request),this.channel.sendToQueue(this.queues.request,Buffer.from(JSON.stringify(s)))}async sendEmail({email:e,templateName:t,data:n,smtpName:s,callback:r}){if(!this.channel)throw new Error("Not connected to RabbitMQ");const o=i(),c={correlationId:o,send:{email:e,clientName:s||"default",templateName:t,data:n||{}}};if(r)this.callbacks.set(o,r);await this.channel.assertQueue(this.queues.request),this.channel.sendToQueue(this.queues.request,Buffer.from(JSON.stringify(c)))}async close(){if(this.channel)await this.channel.close();if(this.connection)await this.connection.close()}}var m=a;export{m as default};
